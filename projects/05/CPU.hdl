// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {   

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Solver: khanasif786 -> www.github.com/khanasif786
    // There may be some short and efficient method. This solution
    // is only upto the limitations of this course.if there any better
    // solution than feel free to make a pull request.

    //MuxA
    Not(in=instruction[15], out=MuxASel);
    Mux16(a=AluOut, b=instruction, sel=MuxASel, out=MuxAOut);

    //ARegister
    Not(in=instruction[15], out=InstZeroNot);
    Or(a=instruction[5], b=InstZeroNot, out=ARegisterLoad);
    ARegister(in=MuxAOut, load=ARegisterLoad, out=ARegisterOut,out[0..14]=addressM);

    //DRegister 
    And(a=instruction[4], b=instruction[15], out=AndOut);
    DRegister(in=AluOut, load=AndOut, out=DRegisterOut);
     
    //MuxB
    And(a=instruction[15], b=instruction[12], out=MuxBSel);
    Mux16(a=ARegisterOut, b=inM, sel=MuxBSel, out=MuxBOut);
     
    // MRegister Write (writeM)
    And(a=instruction[3], b=instruction[15], out=writeM);

    // ALU
    ALU(x=DRegisterOut, y=MuxBOut, zx=instruction[11], nx=instruction[10],zy=instruction[9],
     ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=AluOut, zr=zrOut, ng=ngOut);

    /////// JUMP Circuit
    // J1 = instruction[13] 
    // J2 = instruction[14]
    // J3 = instruction[15]
    // Helpers
    Not(in=instruction[2], out=inst13Not);
    Not(in=instruction[1], out=inst14Not);
    Not(in=instruction[0], out=inst15Not);
    Not(in=zrOut, out=zrOutNot);
    Not(in=ngOut, out=ngOutNot);

    ////////

    //if j3 == 1 And ng == 0 and zr == 0
    And(a=ngOutNot, b=zrOutNot, out=FullPositive);
    And(a=FullPositive, b=instruction[0], out=jgt);
    And(a=instruction[15], b=jgt, out=temp1);

    // j2 == 1 And  zr == 1
    And(a=zrOut, b=instruction[1], out=jeq);
    And(a=jeq, b=instruction[14], out=temp2);

    // j1 == 1 And ng  == 1
    And(a=instruction[2], b=ngOut, out=jlt);
    And(a=jlt, b=instruction[13], out=temp3);

    Or(a=temp1, b=temp2, out=out1);
    Or(a=out1, b=temp3, out=JumpOut);

    // PC
    PC(in=ARegisterOut, load=JumpOut, inc=true, reset=reset, out[0..14]=pc);

    
    
}